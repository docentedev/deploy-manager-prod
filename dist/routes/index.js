/* claudio.dcv@gmail.com */
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const e=require("express"),r=require("jsonwebtoken"),o=require("sequelize"),{DeployConfig:n,User:s,DeployLog:i}=require("../db/models"),{deployApi:t}=require("../controllers/deployController"),{getSocket:a}=require("../socket"),{global:d}=require("../global"),l=require("../middlewares/loginMiddleware"),c=require("../middlewares/authMiddleware"),u=e.Router();u.get("/",c,((e,r)=>{const o={...d.params};r.render("index",o)})),u.get("/login",((e,r)=>{r.render("login",{error:null})})),u.get("/logout",c,((e,r)=>{r.clearCookie("authToken"),r.redirect("/login")})),u.get("/deploy-configs",c,(async(e,r)=>{try{const e=await n.findAll({include:[{model:s}],order:[["createdAt","DESC"]]});r.render("deployConfigs/list",{error:null,configs:e})}catch(e){r.render("deployConfigs/list",{error:"Error fetching DeployConfigs",configs:[]})}})),u.get("/deploy-configs/create",c,((e,r)=>{r.render("deployConfigs/create",{error:null,formData:{}})})),u.get("/deploy-configs/:id",c,(async(e,r)=>{const{id:o}=e.params;try{const e=await n.findByPk(o);if(!e)return r.render("deployConfigs/view",{error:"DeployConfig not found",config:null});r.render("deployConfigs/view",{error:null,config:e})}catch(e){r.render("deployConfigs/view",{error:"Error fetching DeployConfig",config:null})}})),u.get("/deploy-configs/:id/edit",c,(async(e,r)=>{const{id:o}=e.params;try{const e=await n.findByPk(o);if(!e)return r.render("deployConfigs/edit",{error:"DeployConfig not found",config:{}});r.render("deployConfigs/edit",{error:null,config:e})}catch(e){r.render("deployConfigs/edit",{error:"Error fetching DeployConfig",config:{}})}})),u.get("/deploy-configs/:id/action",c,(async(e,r)=>{const{id:o}=e.params,s={...d.params};try{const e=await n.findByPk(o);if(!e)return r.render("deployConfigs/action",{...s,error:"DeployConfig not found",config:null});r.render("deployConfigs/action",{...s,error:null,config:e})}catch(e){r.render("deployConfigs/action",{...s,error:"Error fetching DeployConfig",config:null})}})),u.get("/deploy-configs/:id/logs",c,(async(e,r)=>{const{id:o}=e.params,n={...d.params};try{const e=await i.findAll({where:{deployConfigId:o},order:[["createdAt","DESC"]],include:[{model:s}]});if(!e||0===e.length)return r.render("deployConfigs/logs",{...n,error:"No logs found for this DeployConfig",logs:[],id:o});r.render("deployConfigs/logs",{...n,error:null,logs:e,id:o})}catch(e){r.render("deployConfigs/logs",{...n,error:"Error fetching logs",logs:[],id:o})}})),u.get("/deploy-configs/:id/logs/:logId",c,(async(e,r)=>{const{id:o,logId:n}=e.params,s={...d.params};try{const e=await i.findByPk(n);if(!e)return r.render("deployConfigs/logDetail",{...s,error:"Log not found",log:null});r.render("deployConfigs/logDetail",{...s,error:null,log:e})}catch(e){r.render("deployConfigs/logDetail",{...s,error:"Error fetching log",log:null})}})),u.get("/users",c,(async(e,r)=>{try{const e=await s.findAll({order:[["createdAt","DESC"]]});r.render("users/list",{error:null,users:e})}catch(e){r.render("users/list",{error:"Error fetching users",users:[]})}})),u.get("/users/create",c,((e,r)=>{r.render("users/create",{error:null,formData:{}})})),u.get("/users/edit/:id",c,(async(e,r)=>{const{id:o}=e.params;try{const e=await s.findByPk(o);if(!e)return r.render("users/edit",{error:"User not found",user:{}});r.render("users/edit",{error:null,user:e})}catch(e){r.render("users/edit",{error:"Error fetching user",user:{}})}})),u.get("/users/:id",c,(async(e,r)=>{const{id:o}=e.params;try{const e=await s.findByPk(o);if(!e)return r.render("users/detail",{error:"User not found",user:null});r.render("users/detail",{error:null,user:e})}catch(e){r.render("users/detail",{error:"Error fetching user",user:null})}})),u.post("/login",l,((e,r)=>{const o=r.locals.token;r.cookie("authToken",o,{httpOnly:!0}),r.redirect("/")})),u.post("/deploy-configs",c,(async(e,r)=>{const{key:o,name:s,baseDir:i,script:t}=e.body;if(!(o&&s&&i&&t))return r.render("deployConfigs/create",{error:"All fields are required.",formData:{key:o,name:s,baseDir:i,script:t}});try{await n.create({key:o,name:s,baseDir:i,script:t,userId:e.user.id}),r.redirect("/deploy-configs")}catch(e){r.render("deployConfigs/create",{error:"Error creating DeployConfig.",formData:{key:o,name:s,baseDir:i,script:t}})}})),u.post("/deploy-configs/:id",c,(async(e,r)=>{const{id:o}=e.params,{key:s,name:i,baseDir:t,script:a}=e.body;if(!(s&&i&&t&&a))return r.render("deployConfigs/edit",{error:"All fields are required.",config:{id:o,key:s,name:i,baseDir:t,script:a}});try{const e=await n.findByPk(o);if(!e)return r.render("deployConfigs/edit",{error:"DeployConfig not found.",config:{id:o,key:s,name:i,baseDir:t,script:a}});await e.update({key:s,name:i,baseDir:t,script:a}),r.redirect("/deploy-configs")}catch(e){r.render("deployConfigs/edit",{error:"Error updating DeployConfig.",config:{id:o,key:s,name:i,baseDir:t,script:a}})}})),u.put("/deploy-configs/:id",c,(async(e,r)=>{const{id:o}=e.params,{key:s,name:i,baseDir:t,script:a}=e.body;if(!(s&&i&&t&&a))return r.render("deployConfigs/edit",{error:"All fields are required.",config:{id:o,key:s,name:i,baseDir:t,script:a}});try{const e=await n.findByPk(o);if(!e)return r.render("deployConfigs/edit",{error:"DeployConfig not found.",config:{id:o,key:s,name:i,baseDir:t,script:a}});await e.update({key:s,name:i,baseDir:t,script:a}),r.redirect("/deploy-configs")}catch(e){r.render("deployConfigs/edit",{error:"Error updating DeployConfig.",config:{id:o,key:s,name:i,baseDir:t,script:a}})}})),u.post("/users/delete/:id",c,(async(e,r)=>{const{id:o}=e.params;if(o==e.user.id)return r.redirect("/users");try{const e=await s.findByPk(o);if(!e)return r.redirect("/users");await e.destroy(),r.redirect("/users")}catch(e){r.redirect("/users")}})),u.post("/users",c,(async(e,r)=>{const{username:n,email:i,role:t,password:a,confirmPassword:d,active:l}=e.body;if(!(n&&i&&t&&a&&d))return r.render("users/create",{error:"All fields are required.",formData:{username:n,email:i,role:t,active:l}});if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(i))return r.render("users/create",{error:"Invalid email format.",formData:{username:n,email:i,role:t,active:l}});if(!/^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d!@#$%^&*()_+={}\[\]:;"'<>,.?~`-]{8,}$/.test(a))return r.render("users/create",{error:"Password must be at least 8 characters long and contain at least one letter and one number.",formData:{username:n,email:i,role:t,active:l}});if(a!==d)return r.render("users/create",{error:"Passwords do not match.",formData:{username:n,email:i,role:t,active:l}});if(n.length<3||n.length>20)return r.render("users/create",{error:"Username must be between 3 and 20 characters long.",formData:{username:n,email:i,role:t,active:l}});if(n.includes(" "))return r.render("users/create",{error:"Username cannot contain spaces.",formData:{username:n,email:i,role:t,active:l}});if(!["user","developer","admin"].includes(t))return r.render("users/create",{error:"Invalid role.",formData:{username:n,email:i,role:t,active:l}});try{if(await s.findOne({where:{[o.Op.or]:[{username:n},{email:i}]}}))return r.render("users/create",{error:"Username or email already exists.",formData:{username:n,email:i,role:t,active:l}});await s.create({username:n,email:i,password:a,role:t,active:!!l}),r.redirect("/users")}catch(e){r.render("users/create",{error:"Error creating user.",formData:{username:n,email:i,role:t,active:l}})}})),u.post("/users/:id",c,(async(e,r)=>{const{id:o}=e.params,{username:n,email:i,role:t,password:a,confirmPassword:d,active:l}=e.body;if(!n||!i||!t)return r.render("users/edit",{error:"All fields are required.",user:{id:o,username:n,email:i,role:t}});if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(i))return r.render("users/edit",{error:"Invalid email format.",user:{id:o,username:n,email:i,role:t}});if(a&&!/^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z\d!@#$%^&*()_+={}\[\]:;"'<>,.?~`-]{8,}$/.test(a))return r.render("users/edit",{error:"Password must be at least 8 characters long and contain at least one letter and one number.",user:{id:o,username:n,email:i,role:t}});if(a&&a!==d)return r.render("users/edit",{error:"Passwords do not match.",user:{id:o,username:n,email:i,role:t}});if(n.length<3||n.length>20)return r.render("users/edit",{error:"Username must be between 3 and 20 characters long.",user:{id:o,username:n,email:i,role:t}});if(n.includes(" "))return r.render("users/edit",{error:"Username cannot contain spaces.",user:{id:o,username:n,email:i,role:t}});if(!["user","developer","admin"].includes(t))return r.render("users/edit",{error:"Invalid role.",user:{id:o,username:n,email:i,role:t}});try{const e=await s.findByPk(o);if(!e)return r.render("users/edit",{error:"User not found.",user:{id:o,username:n,email:i,role:t}});const d=a||e.password;await e.update({username:n,email:i,role:t,password:d,active:!!l}),r.redirect("/users")}catch(e){r.render("users/edit",{error:"Error updating user.",user:{id:o,username:n,email:i,role:t}})}})),u.post("/deploy/:id",c,(async(e,r)=>{const{id:o}=e.params,s=await n.findByPk(o);if(!s)return r.status(404).json({error:"DeployConfig not found"});const i=a();t(e,r,i,s)})),module.exports=u;